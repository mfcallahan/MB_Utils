'MbUtils unit tests: ensure all subs and functions are working properly

Include "MapBasic.Def"
Include "MbUtils.def"

Declare Sub Main

Declare Sub DialogTest
Declare Sub LogTest
Declare Sub ProgressbarTest
Declare Sub FileTest
Declare Sub TableTest

Declare Sub DialogHandler


'-------------------------------------------------------------------------------------------------------------

'MbUtils unit tests.  Read this file for addtional usage examples.

Sub Main

Set Window Message Position (2, 1) Width 3 Height 5
Print Chr$(12)

Print "MbUtils version = " + GetMbUtilsVersion()
Print ""

Dim userName As String
userName = GetUserName()

Dim result As String
result = Note2("MbUtils unit tests", "userName = " + userName, "OK")


'Call DiaLogTest()

'Call ProgressbarTest()

'Call LogTest()

Call FileTest()

Call TableTest()




End Sub

'------------------------------------------------------------------------------------------------------------

Sub DialogTest


'Note2() test
Dim result As String
result = Note2("MbUtils unit tests", "Here's another dialog box", "OK")
result = Note2("MbUtils unit tests", "Here's another dialog box", "OKCANCEL")
result = Note2("MbUtils unit tests", "Here's another dialog box", "YESNO")
result = Note2("MbUtils unit tests", "Here's another dialog box", "RETRYCANCEL")
result = Note2("MbUtils unit tests", "Here's another dialog box", "ABORTRETRYIGNORE")
Print "Note2() test passed"
Print ""


'BrowseForFolder() test
Dim savePath As String
savePath = BrowseForFolder("C:\")
Print "BrowseForFolder() test passed"
Print ""
Print ""
Print ""


'WindowRemoveCloseButton() test
' Dialog
	' Title "MbUtils Unit Tests"
	' Width 100 Height 100
	' Calling DialogHandler
' Control OKButton
' Control CancelButton

' If CommandInfo(CMD_INFO_DLG_OK) Then
	' Note "You clicked OK"
' End If

' Print "WindowRemoveCloseButton() test passed"

' Print ""
' Print ""
' Print ""

End Sub


'-------------------------------------------------------------------------------------------------------------

Sub LogTest

Dim logFile As String
logFile = ApplicationDirectory$() + "log.txt"

If DoesFileExist(logFile) Then
	Call DeleteFile(logFile)
End If

Call WriteToLogFile(logFile, "Test log file created.")
Call WriteToLogFile(logFile, "Here is another line.")

Print "WriteToLogFile() passed"

Print ""
Print ""
Print ""

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub ProgressbarTest

Print "ProgressbarTest() test"

Call QuickProgressbarOn("My Application", "Doing important stuff...")

Call PauseProgram(5)

Call QuickProgressbarOff()

Print "ProgressbarTest() test passed"
Print ""
Print ""
Print ""



End Sub

'-------------------------------------------------------------------------------------------------------------

Sub FileTest

Call CreateFile(ApplicationDirectory$() + "test_file.txt")
Print "CreateFile() test passed"
Print ""

Call CopyFile(ApplicationDirectory$() + "test_file.txt", ApplicationDirectory$() + "test_file_COPY.txt")
Print "CopyFile() test passed"
Print ""

Call DeleteFile(ApplicationDirectory$() + "test_file.txt")
Call DeleteFile(ApplicationDirectory$() + "test_file_COPY.txt")
Print "DeleteFile() test passed"
Print ""

'with or without slash at end of path, doesn't matter.  Any sub or function taking a path only can be passed 
'a string representing the path without without the slash at the end.
Dim fileList(), fileList2() As String

Call GetFiles("C:\Windows\Temp", fileList(), "*.*", False)
Call GetFiles("C:\Windows\Temp\", fileList2(), "*.*", False)

Dim i As Integer
For i = 1 To UBound(fileList())
	Print fileList(i)
Next

For i = 1 To UBound(fileList2())
	Print fileList2(i)
Next

Print ""
Print "GetFiles() test passed"
Print ""

Dim filePresent As Logical
filePresent = DoesFileExist(fileList(1))
Print "DoesFileExist() = " + Str$(filePresent)
Print ""

Call CreateFolder("C:\Windows\Temp\test_folder")
Print "CreateFolder() test passed"
Print ""

Call CopyFolder("C:\Windows\Temp\test_folder", "C:\Windows\Temp\test_folder_copy")
Print "CopyFolder() test passed"
Print ""

Dim folderPresent As Logical
folderPresent = DoesFolderExist("C:\Windows\Temp\test_folder_copy")
Print "DoesFolderExist() = " + Str$(folderPresent)
Print ""

Call DeleteFolder("C:\Windows\Temp\test_folder")
Call DeleteFolder("C:\Windows\Temp\test_folder_copy")
Print "DeleteFolder() test passed"
Print ""

Dim folderList() As String

Call GetFolders("C:\Windows\Temp", folderList())

For i = 1 To UBound(folderList())
	Print folderList(i)
Next

Print "GetFolders() test passed"
Print ""

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub TableTest

If IsTableOpen("test_table") Then
	Close Table test_table
End If

Create Table "test_table" (Field1 Char(10),Field2 Char(10),Field3 Char(10)) File "C:\Windows\Temp\test_table.tab" TYPE NATIVE Charset "WindowsLatin1"
Create Map For test_table CoordSys Earth Projection 1, 0

Dim testTableFullPath As String
testTableFullPath = TableInfo(test_table, TAB_INFO_TABFILE)

If IsTableOpen("test_table") Then
	Print "test_table is open"
Print ""
End If

Dim openTables() As String
Call ListOpenTables(openTables())

Dim i As Integer
For i = 1 to UBound(openTables())
	Print openTables(i)
Next

Print "ListOpenTables() test passed"
Print ""

Call KillTable(testTableFullPath)
Print "KillTable() test passed"
Print ""


End Sub

'-------------------------------------------------------------------------------------------------------------

Sub DialogHandler

Call WindowRemoveCloseButton(FrontWindow())

End Sub

'-------------------------------------------------------------------------------------------------------------


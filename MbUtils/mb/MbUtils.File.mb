Include "MapBasic.Def"
Include "MbUtils.def"

'Wrapped .NET methods - these do not need to be included or declared outside this file
Declare Method _FolderBrowserDialog Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String) As String
Declare Method _DoesFileExist Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal fileN As String, errStr As String) As Logical
Declare Method _DoesFolderExist Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String) As Logical
Declare Method _GetFiles Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, files() As String, ByVal numFiles As Integer, ByVal searchExt As String, ByVal allDirs As Integer, errStr As String)
Declare Method _NumFiles Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, ByVal searchExt As String, ByVal allDirs As Integer) As Integer
Declare Method _GetFolders Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, folders() As String, ByVal numFolders As Integer, errStr As String)
Declare Method _NumFolders Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String) As Integer
Declare Method _KillTable Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String)
Declare Method _CreateFolder Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String)
Declare Method _DeleteFolder Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String)
Declare Method _DeleteFile Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String)
Declare Method _CopyFile Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal sourcePath As String, ByVal destPath As String, errStr As String)
Declare Method _CopyFolder Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal sourcePath As String, ByVal destPath As String, errStr As String)
Declare Method _CreateFile Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal filePath As String, errStr As String)
Declare Method _GetFileNameFromPath Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String) As String
Declare Method _GetFileCreationTime Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String) As String
Declare Method _GetFileLastWriteTime Class "MbUtils.FileUtils" Lib "MbUtils.dll" (ByVal dir As String, errStr As String) As String
Declare Method _WriteToLogFile Class "MbUtils.Logger" Lib "MbUtils.dll" (ByVal logFilePath As String, ByVal logMsg As String, errStr As String)


'-------------------------------------------------------------------------------------------------------------

Sub CopyFile(ByVal filePathSource As String, ByVal filePathDest As String)

'errStr is created with an empty value and passed by ref to the .NET method.
'If an exception is thrown in the try/catch block of a MbUtils.dll method, errStr is populated with the exception details.
Dim errStr As String

retry:
errStr = ""

'Internal call to MbUtils.dll here.
Call _CopyFile(filePathSource, filePathDest, errStr)

'If errStr still has the empty value, no exception was thrown and the MbUtils sub/fucntion will exit without error.
'If errStr does not have an empty value an error has occured - handle it here. 
If errStr <> "" Then

	errStr = "CopyFile() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr
	
	'Log the exception detials to a text file in ApplicationDirectory$(). Look for file prefixed with "MbUtils_error_"
	Call _DumpException(ApplicationDirectory$(), errStr)
	
	'Display an error dialog box with the internal _MbUtilErrorDialog() funciton.  User will be prompted to abort, retry, or ignore.
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		'If users aborts, terminate the program.
		Case "abort"
			End Program
		'If user retries, go back to the retry: label at the top of this sub/fuicntion.
		Case "retry"
			Goto retry
		'If the users ignores, continue execution of the program.  Ignoring the error may produce unexpected resutls and/or additional errors.
		Case "ignore"
			Exit Sub
	End Case
	
End If

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub CopyFolder(ByVal fullPathSource As String, ByVal fullPathDest As String)

Dim errStr As String

retry:
errStr = ""

Call _CopyFolder(fullPathSource, fullPathDest, errStr)

If errStr <> "" Then

	errStr = "CopyFolder() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If


End Sub

'-------------------------------------------------------------------------------------------------------------

Sub CreateFile(ByVal filePath As String)

Dim errStr As String

retry:
errStr = ""

Call _CreateFile(filePath, errStr)

If errStr <> "" Then

	errStr = "CreateFile() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If


End Sub

'-------------------------------------------------------------------------------------------------------------

Sub CreateFolder(ByVal folderPath As String)

Dim errStr As String

retry:
errStr = ""


Call _CreateFolder(folderPath, errStr)

If errStr <> "" Then

	errStr = "CreateFolder() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub DeleteFile(ByVal filePath As String)

Dim errStr As String

retry:
errStr = ""

Call _DeleteFile(filePath, errStr)

If errStr <> "" Then

	errStr = "DeleteFile() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr
	
	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub DeleteFolder(ByVal folderPath As String)

Dim errStr As String

retry:
errStr = ""

Call _DeleteFolder(folderPath, errStr)

If errStr <> "" Then

	errStr = "DeleteFolder() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub KillTable(ByVal fullTablePath As String)

Dim tabName As String
tabname = _GetFileNameFromPath(fullTablePath)
tabname = Left$(tabName, (Len(tabname) - 4))

If IsTableOpen(tabName) Then
	Close Table tabName
End If

Dim errStr As String

retry:
errStr = ""

Call _KillTable(fullTablePath, errStr)

If errStr <> "" Then

	errStr = "KillTable() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If


End Sub

'-------------------------------------------------------------------------------------------------------------

Sub GetFiles(ByVal filePath As String, files() As String, ByVal searchExt As String, ByVal searchAllDirs As Logical)

Dim numFiles As Integer
Dim errStr As String

retry:
errStr = ""
Do Case searchAllDirs
	Case True
		numFiles = _NumFiles(filePath, searchExt, 1)
		ReDim files(numFiles)
		Call _GetFiles(filePath, files(), numFiles, searchExt, 1, errStr)
	Case False
		numFiles = _NumFiles(filePath, searchExt, 0)
		ReDim files(numFiles)
		Call _GetFiles(filePath, files(), numFiles, searchExt, 0, errStr)
End Case


If errStr <> "" Then

	errStr = "GetFiles() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub GetFolders(ByVal folderPath As String, folders() As String)

Dim numFolders As Integer
Dim errStr As String

retry:
numFolders = _NumFolders(folderPath)
ReDim folders(numFolders)
errStr = ""

Call _GetFolders(folderPath, folders(), numFolders, errStr)

If errStr <> "" Then

	errStr = "GetFolders() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub ListColumns(ByVal tableName As String, colArray() As String)

Dim errStr As String

retry:
errStr = ""
OnError Goto sub_error

ReDim colArray(TableInfo(tableName, TAB_INFO_NCOLS))

Dim i As Integer
For i = 1 To TableInfo(tableName, TAB_INFO_NCOLS)
	colArray(i) = ColumnInfo(tableName, "col" + i, COL_INFO_NAME)
Next

OnError Goto 0

Exit Sub

sub_error:

errStr = "ListOpenTables() error: MbUtils.mbo " + Chr$(13) + Chr$(13) + Error$()

Call _DumpException(ApplicationDirectory$(), errStr)

Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
End Case


End Sub

'-------------------------------------------------------------------------------------------------------------

Sub ListOpenTables(openTables() As String)

Dim errStr As String

retry:
errStr = ""
OnError Goto sub_error

ReDim openTables(NumTables())

Dim i As Integer
For i = 1 To NumTables()
	openTables(i) = TableInfo(i, TAB_INFO_NAME)
Next

OnError Goto 0

Exit Sub

sub_error:

errStr = "ListOpenTables() error: MbUtils.mbo " + Chr$(13) + Chr$(13) + Error$()

Call _DumpException(ApplicationDirectory$(), errStr)

Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case

End Sub

'-------------------------------------------------------------------------------------------------------------

Sub WriteToLogFile(ByVal logFilePath As String, ByVal logMsg As String)

Dim errStr As String

retry:
errStr = ""
Call _WriteToLogFile(logFilePath, logMsg, errStr)

If errStr <> "" Then

	errStr = "WriteToLogFile() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case
	
End If

End Sub

'-------------------------------------------------------------------------------------------------------------

Function BrowseForFolder(ByVal startPath As String) As String

Dim errStr, result As String


retry:
errStr = ""
Call _SetMapInfowFront(WindowInfo(WIN_MAPINFO, WIN_INFO_WND), errStr)

If errStr <> "" Then
	Goto func_error
End If

result = _FolderBrowserDialog(startPath, errStr)

If errStr <> "" Then
	
	func_error:
	errStr = "BrowseForFolder() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case

Else	
	BrowseForFolder = result
End If

End Function

'-------------------------------------------------------------------------------------------------------------

Function DoesFileExist(ByVal filePath As String) As Logical

Dim errStr, result As String

retry:
errStr = ""
result = _DoesFileExist(filePath, errStr)

If errStr <> "" Then

	errStr = "DoesFileExist() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr
	
	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case

Else	
	DoesFileExist = result
End If

End Function

'-------------------------------------------------------------------------------------------------------------

Function DoesFolderExist(ByVal folderPath As String) As Logical

Dim errStr, result As String

retry:
errStr = ""
result = _DoesFolderExist(folderPath, errStr)

If errStr <> "" Then

	errStr = "DoesFolderExist() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case

Else	
	DoesFolderExist = result
End If

End Function
 
'-------------------------------------------------------------------------------------------------------------

Function GetFileCreationTime(ByVal fullFilePath As String) As Logical

Dim errStr, result As String

retry:
errStr = ""
result = _GetFileCreationTime(fullFilePath, errStr)

If errStr <> "" Then

	errStr = "GetFileCreationTime() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case

Else	
	GetFileCreationTime = result
End If


End Function

'-------------------------------------------------------------------------------------------------------------

Function GetFileLastWriteTime(ByVal fullFilePath As String) As Logical

Dim errStr, result As String

retry:
errStr = ""
result = _GetFileLastWriteTime(fullFilePath, errStr)

If errStr <> "" Then

	errStr = "GetFileLastWriteTime() error: MbUtils.mbo, MbUtils.dll " + Chr$(13) + Chr$(13) + errStr

	Call _DumpException(ApplicationDirectory$(), errStr)
	
	Dim userSel As String
	userSel = _MbUtilErrorDialog(errStr)
	
	Do Case userSel
		Case "abort"
			End Program
		Case "retry"
			Goto retry
		Case "ignore"
			Exit Sub
	End Case

Else	
	GetFileLastWriteTime = result
End If



End Function

'-------------------------------------------------------------------------------------------------------------

Function IsTableOpen(ByVal tableName As String) As Logical

Dim result As Logical
result = False

If NumTables() = 0 Then	
	Goto return
End If

Dim i As Integer
For i = 1 to NumTables()
	If TableInfo(i, TAB_INFO_NAME) = tableName Then
		result = True
		Goto return
	End If
Next

return:
IsTableOpen = result

End Function

'-------------------------------------------------------------------------------------------------------------

Function IsColumnPresent(ByVal tableName As String, ByVal colName As String) As Logical

Dim result As Logical
result = False

If NumTables() = 0 Then	
	Goto return
End If

Dim i As Integer
For i = 1 to TableInfo(tableName, TAB_INFO_NCOLS)
	If ColumnInfo(tableName, "COL" + i, COL_INFO_NAME) = colName Then
		result = True
		Goto return
	End If
Next

return:
IsColumnPresent = result

End Function

'-------------------------------------------------------------------------------------------------------------


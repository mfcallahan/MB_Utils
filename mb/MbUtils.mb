'****************************************************************************
'*
'*	Lam.MbUtils.mbo
'*	LAM MapBaisc utility functions and methods
'*
'*	updated: 6/29/14 by Matt C.
'*
'****************************************************************************
'*
'*		User defined functions
'*
'*		Include Lam.MbUtils.mbo in the .mbp project file and Lam.MbUtils.def in the .mb file(s).
'*		Modify Lam.MbUtils.def as needed for your project.
'*		
'*		Functions and variables declared by default in Lam.MbUtils.def:
'*
'*		Declare Sub CreateLogFile(ByVal logFilePath As String)
'*		Declare Sub DeleteLogFile(ByVal logFilePath As String)
'*		Declare Sub WriteToLogFile(ByVal logFilePath As String, ByVal logMsg As String)
'*		
'*		Declare Function IsTableOpen(ByVal tableName As String) As Logical
'*		Declare Function GetUserName() As String
'*		Declare Function ReplaceInString(ByVal fullString As String, ByVal removeString As String, ByVal replacementString As String) As String
'*		Declare Function BrowseForFolder(ByVal initialPath As String) As String
'*		Declare Function DoesFileExist(ByVal fullFilePath As String) As Logical
'*		Declare Function DoesFolderExist(ByVal fullPath As String) As Logical
'*
'*		Global userName As String
'*
'*		
'*
'****************************************************************************
'*
'*	Documentation:
'*
'****************************************************************************
'*
'*
'*
'*
'*
'*
'*
'****************************************************************************
'*		DoesFileExist() Function
'*		Purpose: Check if a file exists
'*		Parameters: fullFilePath As String (the full path and file name, ex: "C:\Temp\Table1.TAB"
'*		Return value: Logical
'*		Example:
'*			Dim fileExists As Logical
'*			fileExists = DoesFileExist("Q:\MapFiles\USA\AZ\123456_sites.tab")
'****************************************************************************
'*		DoesFolderExist() Function
'*		Purpose: Check if a folder exists
'*		Parameters: fullPath As String (the full path, ex: "C:\Temp\"
'*		Return value: Logical
'*		Example:
'*			Dim folderExists As Logical
'*			fileExists = DoesFolderExist
'****************************************************************************
'*		GetUserName() Function
'*		Purpose: Get the Windows user name of currently logged in user
'*		Parameters: none
'*		Return value: String (Windows user name)
'*		Example: 
'*			Dim currentUser As String
'*			currentUser = GetUserName()
'****************************************************************************
'*		IsTableOpen() Function
'*		Purpose: Check if a table is currently open.
'*		Parameters: none
'*		Return value: Logical
'*		Example:
'*			If IsTableOpen("US_States") Then
'*				Close Table US_States
'*			End If	
'****************************************************************************
'*		BrowseForFolder() Function
'*		Purpose: Prompt the user with a dialog box to select a folder
'*		Parameters: initialPath As String (the folder that will be pre-selected in the dialog)
'*		Return value: String (the full path of the folder selected by the user)
'*		Example:
'*			Dim selectedFolder As String
'*			selectedFolder = BrowseForFolder("C:\")
'****************************************************************************
'*		ReplaceInString() Function
'*		Purpose: 
'*		Parameters: 
'*		Return value: string
'*		Example:
'*			Dim s, sNew As String
'*			s = "The car is red."
'*			sNew = 
'*
'****************************************************************************
'*
'*

Include "MapBasic.Def"
Include "Lam.MbUtils.def"

'Wrapped .NET methods - these do not need to be included or declared outside this file
Declare Method _FolderBrowserDialog Class "Lam.MbUtils.FileUtils" Lib "Lam.MbUtils.dll" (ByVal dir As String, errStr As String) As String
Declare Method _DoesFileExist Class "Lam.MbUtils.FileUtils" Lib "Lam.MbUtils.dll" As (ByVal fileN As String) As Logical
Declare Method _DoesFolderExist Class "Lam.MbUtils.FileUtils" Lib "Lam.MbUtils.dll" (ByVal dir As String) As Logical
Declare Method _ListFiles Class "Lam.MbUtils.FileUtils" Lib "Lam.MbUtils.dll" (ByVal dir As String, files() As String, errStr As String)
Declare Method _ListFolders Class "Lam.MbUtils.FileUtils" Lib "Lam.MbUtils.dll" (ByVal dir As String, folders() As String, errStr As String) As Logical
Declare Method _KillTable Class "Lam.MbUtils.FileUtils" Lib "Lam.MbUtils.dll" (ByVal fileN As String, errStr As String) As Logical

Declare Method _CreateLogFile Class "Lam.MbUtils.Logger" Lib "Lam.MbUtils.dll" (ByVal logFilePath As String)
Declare Method _DeleteLogFile Class "Lam.MbUtils.Logger" Lib "Lam.MbUtils.dll" (ByVal logFilePath As String)
Declare Method _WriteToLogFile Class "Lam.MbUtils.Logger" Lib "Lam.MbUtils.dll" (ByVal logFilePath As String, logMsg As String, errStr As String) As Logical

Declare Method _Sleep Class "Lam.MbUtils.GeneralUtils" Lib "Lam.MbUtils.dll" (ByVal t As Integer) As Logical As Logical


'Windows API functions - these do not need to be included or declared outside this file
Declare Function GetUserNameWin Lib "advapi32.dll" Alias "GetUserNameA" (lpBuffer As String, nSize As Integer) As Integer

'---------------------------------------------------------------------

Sub KillTable(ByVal fullFilePath As String, errStr)

Dim errStr As String
errStr = ""

Call _KillTable(fullFilePath, errStr)

If errStr <> "" Then
	Note "Error deleting files (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) + Chr$(13) + errStr
End If

End Sub

'---------------------------------------------------------------------

Sub ListFiles(ByVal path As String, files() As String)

Dim errStr As String
errStr = ""
Call _ListFiles(path, files(), errStr)

If errStr <> "" Then
	Note "Error fetching files (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) + Chr$(13) + errStr
End If

End Sub

'---------------------------------------------------------------------

Sub ListFolders(ByVal path As String, folders() As String)

Dim errStr As String
errStr = ""
Call _ListFolders(path, files(), errStr)

If errStr <> "" Then
	Note "Error fetching folders (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) + Chr$(13) + errStr
End If

End Sub

'---------------------------------------------------------------------

Sub PauseProgram(ByVal seconds As Integer)

Dim errStr As String
errStr = ""
Call _Sleep(seconds, errStr)

If errStr <> "" Then
	Note "Error pausing program (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) +Chr$(13) + errStr
End If

End Sub

'---------------------------------------------------------------------

Sub CreateLogFile(ByVal logFilePath As String)

Dim errStr As String
errStr = ""
Call _CreateLogFile(logFilePath, errStr)

If errStr <> "" Then
	Note "Error creating log file (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) + Chr$(13) + errStr
End If

End Sub

'---------------------------------------------------------------------

Sub DeleteLogFile(ByVal logFilePath As String)

Dim errStr As String
errStr = ""
Call _DeleteLogFile(logFilePath, errStr)

If errStr <> "" Then
	Note "Error deleting log file (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) + Chr$(13) + errStr
End If

End Sub

'---------------------------------------------------------------------

Sub WriteToLogFile(ByVal logFilePath As String, ByVal logMsg As String)

Dim errStr As String
errStr = ""
Call _WriteToLogFile(logFilePath, logMsg, errStr)

If errStr <> "" Then
	Note "Error writing to log file (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) + Chr$(13) + errStr
End If

End Sub

'---------------------------------------------------------------------

Function BrowseForFolder(ByVal startPath As String) As String

Dim errStr As String
Dim result As String
result = _FolderBrowserDialog(startPath, errStr)

If result = "" Then
	Note "Error calling FolderBrowserDialog: (Lam.MbUtils.mbo, Lam.MbUtils.dll): " + Chr$(13) + Chr$(13) + errStr
	Exit Function
End If

BrowseForFolder = result

End Function

'---------------------------------------------------------------------

Function IsTableOpen(ByVal tableName As String) As Logical

Dim result As Logical
result = False

If NumTables() = 0 Then	
	Goto return
End If

Dim i As Integer
For i = 1 to NumTables()
	If TableInfo(i, TAB_INFO_NAME) = tableName Then
		result = True
		Goto return
	End If
Next

return:
IsTableOpen = result

End Function

'---------------------------------------------------------------------

Function DoesFileExist(ByVal fullFilePath As String) As Logical

DoesFileExist = _DoesFileExist(fullFilePath)

End Function

'---------------------------------------------------------------------

Function DoesFolderExist(ByVal fullPath As String) As Logical

DoesFolderExist = _DoesFolderExist(fullPath)

End Function
 
'---------------------------------------------------------------------

Function GetUserName() As String

'Get user name
Dim userName As String
Dim nSize, nLeng As Integer

nSize = 255
userName = Space$(nSize)
nLeng = GetUserNameWin(userName, nSize)

GetUserName = userName

End Function

'---------------------------------------------------------------------

Function ReplaceInString(ByVal fullString As String, ByVal removeString As String, ByVal replacementString As String) As String

Dim removeStringPos As Integer
Dim startString As String
Dim endString As String

OnError Goto ErrorOccured

Search_For_Replace:
removeStringPos = InStr(1, LCase$(fullString),
LCase$(removeString))
If (removeStringPos > 0) Then
    If (removeStringPos = 1) Then
        fullString = replacementString + Mid$(fullString, Len(removeString)+1, Len(fullString) - Len(removeString))
    ElseIf ((removeStringPos + Len(removeString) - 1) = Len(fullString)) Then
        fullString = Left$(fullString, removeStringPos-1) + replacementString
	Else
		startString = Left$(fullString, removeStringPos-1)
		endString = Mid$(fullString, removeStringPos + Len(removeString), Len(fullString) - (removeStringPos + Len(removeString) - 1))
         fullString = startString + replacementString + endString
    End If

    Goto Search_For_Replace
End If

ReplaceInString = fullString

Exit Function

ErrorOccured:
ReplaceInString = ""

End Function

'---------------------------------------------------------------------